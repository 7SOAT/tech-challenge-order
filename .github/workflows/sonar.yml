name: Sonar

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    services:
        mongodb:
          image: mongo:latest
          ports:
            - 27017:27017
          options: >-
            --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: npm install

      - name: Wait for MongoDB to be ready
        run: |
            for i in {1..30}; do
              if mongo --eval 'db.runCommand({ ping: 1 })'; then
                echo "MongoDB is up and running"
                break
              fi
              echo "Waiting for MongoDB..."
              sleep 2
            done

      - name: Run tests and generate coverage
        env:
          MONGODB_URI: mongodb://localhost/order-db-test
        run: npm run test:cov

      - name: Run tests and generate coverage
        run: npm run test:cov
        
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: 7SOAT_tech-challenge-order
          SONAR_ORGANIZATION: 7soat
          SONAR_SCANNER_OPTS: "-Dsonar.javascript.lcov.reportPaths=/coverage/lcov.info"

      - name: MongoDB Logs
        if: failure()
        run: docker logs ${{ job.services.mongodb.id }}